// Script para verificar el env√≠o de datos demogr√°ficos al formulario Plan de Acci√≥n
// Este script ayuda a debuggear si los campos demogr√°ficos se est√°n enviando correctamente

console.log('üîç SCRIPT DE DEBUG - DATOS DEMOGR√ÅFICOS');
console.log('=====================================');

// Funci√≥n para interceptar y mostrar datos demogr√°ficos
function debugDemographicData() {
  // Interceptar llamadas a console.log que contengan datos demogr√°ficos
  const originalLog = console.log;
  console.log = function(...args) {
    const message = args.join(' ');
    
    // Buscar logs relacionados con datos demogr√°ficos
    if (message.includes('üìä Datos demogr√°ficos') || 
        message.includes('grupoEtareo') ||
        message.includes('grupoPoblacion') ||
        message.includes('zona') ||
        message.includes('grupoEtnico') ||
        message.includes('cantidad')) {
      
      console.group('üéØ DATOS DEMOGR√ÅFICOS DETECTADOS:');
      originalLog.apply(console, args);
      console.groupEnd();
    } else {
      originalLog.apply(console, args);
    }
  };
}

// Funci√≥n para verificar estructura de datos antes del env√≠o
function verifyDemographicFields(data) {
  console.group('‚úÖ VERIFICACI√ìN DE CAMPOS DEMOGR√ÅFICOS:');
  
  const demographicFields = {
    'grupoEtareo': data.grupoEtareo,
    'grupoPoblacion': data.grupoPoblacion, 
    'zona': data.zona,
    'grupoEtnico': data.grupoEtnico,
    'cantidad': data.cantidad
  };
  
  console.log('üìã Campos demogr√°ficos encontrados:');
  Object.entries(demographicFields).forEach(([field, value]) => {
    const status = value ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${field}: ${value || 'VAC√çO'}`);
  });
  
  // Verificar conversi√≥n a snake_case
  console.log('\nüîÑ Conversi√≥n esperada a snake_case:');
  console.log('grupoEtareo ‚Üí grupo_etareo:', data.grupoEtareo);
  console.log('grupoPoblacion ‚Üí grupo_poblacion:', data.grupoPoblacion);
  console.log('zona ‚Üí zona:', data.zona);
  console.log('grupoEtnico ‚Üí grupo_etnico:', data.grupoEtnico);
  console.log('cantidad ‚Üí cantidad:', data.cantidad);
  
  console.groupEnd();
  
  return demographicFields;
}

// Funci√≥n para simular datos de prueba
function createTestDemographicData() {
  return {
    // Campos b√°sicos del plan
    programa: 'Programa de Prueba',
    objetivo: 'Objetivo de Prueba',
    meta: 'Meta de Prueba',
    presupuesto: '1000000',
    acciones: 'Acciones de Prueba',
    indicadores: 'Indicadores de Prueba',
    responsable: 'Responsable de Prueba',
    
    // Campos demogr√°ficos de prueba
    grupoEtareo: 'PRIMERA_INFANCIA',
    grupoPoblacion: 'VICTIMA_CONFLICTO',
    zona: 'URBANA',
    grupoEtnico: 'AFRODESCENDIENTE',
    cantidad: '150'
  };
}

// Funci√≥n principal de debug
function runDemographicDebug() {
  console.log('üöÄ Iniciando debug de datos demogr√°ficos...');
  
  // Activar interceptor de logs
  debugDemographicData();
  
  // Crear datos de prueba
  const testData = createTestDemographicData();
  console.log('üìù Datos de prueba creados:', testData);
  
  // Verificar campos
  verifyDemographicFields(testData);
  
  console.log('\nüí° INSTRUCCIONES:');
  console.log('1. Abra la consola del navegador');
  console.log('2. Vaya al formulario de Plan de Acci√≥n');
  console.log('3. Llene los campos demogr√°ficos');
  console.log('4. Observe los logs cuando haga clic en "Guardar"');
  console.log('5. Busque los mensajes marcados con üéØ');
}

// Ejecutar debug si estamos en el navegador
if (typeof window !== 'undefined') {
  runDemographicDebug();
}

// Exportar funciones para uso manual
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    debugDemographicData,
    verifyDemographicFields,
    createTestDemographicData,
    runDemographicDebug
  };
}

console.log('‚úÖ Script de debug cargado. Use runDemographicDebug() para iniciar.');