import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  
  // Permitir APIs y rutas p√∫blicas sin autenticaci√≥n
  if (req.nextUrl.pathname.startsWith('/api/checklist/') || 
      req.nextUrl.pathname.startsWith('/api/test/') ||
      req.nextUrl.pathname.startsWith('/login-test') ||
      req.nextUrl.pathname.startsWith('/_next/') ||
      req.nextUrl.pathname === '/') {
    return res
  }
  
  try {
    // Crear cliente de Supabase para middleware
    const supabase = createMiddlewareClient({ req, res })
    
    console.log('üîç [MIDDLEWARE] Verificando sesi√≥n para:', req.nextUrl.pathname)
    
    // Verificar sesi√≥n con timeout optimizado para producci√≥n
    const sessionPromise = supabase.auth.getSession()
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Session check timeout')), 5000) // 5 segundos para producci√≥n
    })

    const { data: { session } } = await Promise.race([
      sessionPromise,
      timeoutPromise
    ]) as any
    
    console.log('üìã [MIDDLEWARE] Estado de sesi√≥n:', {
      hasSession: !!session,
      userId: session?.user?.id,
      email: session?.user?.email,
      path: req.nextUrl.pathname
    })
    
    // Si est√° en una ruta protegida y no hay sesi√≥n, redirigir al login (p√°gina principal)
    if (req.nextUrl.pathname.startsWith('/dashboard') && !session) {
      console.log('üö´ [MIDDLEWARE] Sin sesi√≥n, redirigiendo a login')
      return NextResponse.redirect(new URL('/', req.url))
    }
    
    // Si est√° en la p√°gina principal y ya tiene sesi√≥n, redirigir al dashboard
    if (req.nextUrl.pathname === '/' && session) {
      console.log('‚úÖ [MIDDLEWARE] Con sesi√≥n, redirigiendo a dashboard')
      return NextResponse.redirect(new URL('/dashboard', req.url))
    }
    
    console.log('‚û°Ô∏è [MIDDLEWARE] Permitiendo acceso a:', req.nextUrl.pathname)
    
    return res
  } catch (error) {
    console.error('‚ùå [MIDDLEWARE] Error verificando sesi√≥n:', error)
    
    // En caso de error, ser m√°s permisivo y permitir que el auth-context maneje la autenticaci√≥n
    if (req.nextUrl.pathname.startsWith('/dashboard')) {
      console.warn('‚ö†Ô∏è [MIDDLEWARE] Error en verificaci√≥n, permitiendo acceso para que el cliente maneje la auth')
      // Permitir acceso y que el contexto de auth maneje la redirecci√≥n si es necesario
      return res
    }
    
    // Para otras rutas, continuar normalmente
    return res
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
}
